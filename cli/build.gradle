plugins {
	id 'java'
	id 'application'
	id 'jacoco'
	id 'com.adarshr.test-logger' version '4.0.0' // for pretty test logs
	id 'com.diffplug.spotless' version '6.25.0' // for code formatting
	id 'com.github.ben-manes.versions' version '0.51.0' // for checking latest version of gradle, gradle plugins and dependencies
	id 'de.undercouch.download' version '5.6.0' // for downloading files in tasks
}

repositories {
	mavenCentral()
}

static def path(String... args) {
	return String.join(File.separator, args)
}


group 'com.ledmington.spiq'
String version = '0.1.0'
String appDescription = 'Human readable programming language'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String appName = 'spiq'
String fatJarBaseName = "spiq-cli-v${version}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get()}", "libs", "${fatJarName}")
String basePackage = "com.ledmington"
String mainClassName = "${basePackage}.spiq.cli.Main"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

ext.junitVersion = "5.10.2"
dependencies {
	implementation project(':parser')

	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

compileJava {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

javadoc {
	failOnError = true
	title "spiq-cli-v${version}"
	// options.addBooleanOption('Werror', true)
}

test {
	useJUnitPlatform()
	// failFast true
}

application {
	mainClass = mainClassName
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

testlogger {
	theme 'standard'
	// theme 'mocha'
	// theme 'mocha-parallel'

	showExceptions true
	showStackTraces true
	showFullStackTraces false
	showCauses true

	slowThreshold 2000

	showSummary true
	showSimpleNames false
	showPassed true
	showSkipped true
	showFailed true
	showOnlySlow false

	showStandardStreams false
	showPassedStandardStreams true
	showSkippedStandardStreams true
	showFailedStandardStreams true

	logLevel 'lifecycle'
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	//ratchetFrom 'origin/main'

	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**', '**/bin/**', '**/gen/**'
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.39.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'org', 'picocli', 'com.ledmington')

		licenseHeader String.join("\n",
				"/*",
				"* ${appName} - ${appDescription}",
				"* Copyright (C) 2022-${new Date().format('yyyy')} ${author} <${authorMail}>",
				"*",
				"* This program is free software: you can redistribute it and/or modify",
				"* it under the terms of the GNU General Public License as published by",
				"* the Free Software Foundation, either version 3 of the License, or",
				"* (at your option) any later version.",
				"*",
				"* This program is distributed in the hope that it will be useful,",
				"* but WITHOUT ANY WARRANTY; without even the implied warranty of",
				"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
				"* GNU General Public License for more details.",
				"*",
				"* You should have received a copy of the GNU General Public License",
				"* along with this program.  If not, see <http://www.gnu.org/licenses/>.",
				"*/",
		)
	}
}

tasks.register('fatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = 'include'
	manifest {
		archiveBaseName = fatJarBaseName
		attributes(
				//"Implementation-Title": "Gradle",
				"Implementation-Version": version,
				"Main-Class": "$mainClassName"
		)
	}
	archiveBaseName = "${fatJarBaseName}"

	doLast {
		println "The fat jar is ${fatJarPath}"
		println String.format("Fat jar size: %.3f MB", (double) new File(fatJarPath).length() / 1_000_000.0)
	}
}

tasks.compileJava.dependsOn(spotlessApply)
