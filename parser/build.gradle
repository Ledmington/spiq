plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '4.0.0' // for pretty test logs
    id 'com.diffplug.spotless' version '6.25.0' // for code formatting
    id 'com.github.ben-manes.versions' version '0.51.0' // for checking latest version of gradle, gradle plugins and dependencies
    id 'de.undercouch.download' version '5.6.0' // for downloading files in tasks
}

group 'com.ledmington.spiq'
version '0.1.0'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String appName = 'spiq'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext.junitVersion = "5.10.2"
dependencies {
    implementation project(':lexer')

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

compileJava {
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Werror'
    options.deprecation = true
    options.encoding = 'UTF-8'
}

javadoc {
    failOnError = true
    title "spiq-parser-v${version}"
    // options.addBooleanOption('Werror', true)
}

test {
    useJUnitPlatform()
    // failFast true
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

testlogger {
    theme 'standard'
    // theme 'mocha'
    // theme 'mocha-parallel'

    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true

    slowThreshold 2000

    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showOnlySlow false

    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true

    logLevel 'lifecycle'
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    //ratchetFrom 'origin/main'

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        trimTrailingWhitespace()
        indentWithTabs()
        endWithNewline()
        setEncoding('utf-8')
    }

    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**', '**/bin/**', '**/gen/**'
        }
        removeUnusedImports()
        formatAnnotations()
        trimTrailingWhitespace()
        endWithNewline()
        setEncoding('utf-8')
        palantirJavaFormat('2.39.0')

        // check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
        importOrder('java', 'javax', 'javafx', 'com', 'org', 'picocli', 'com.ledmington')

        licenseHeader String.join("\n", "/*",
                " * Copyright (C) 2022-${new Date().format('yyyy')} ${author} <${authorMail}>",
                " *",
                " * This file is part of ${appName}.",
                " *",
                " * ${appName} can not be copied and/or distributed without",
                " * the express permission of ${author}.",
                " */")
    }
}

tasks.compileJava.dependsOn(spotlessApply)
